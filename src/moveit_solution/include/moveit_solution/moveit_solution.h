#pragma once

// ros includes
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2/LinearMath/Scalar.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <tf2_ros/transform_listener.h>

// standard c++ library includes (std::string, std::vector)
#include <string>
#include <vector>

// headers generated by catkin for the custom services we have made
#include <moveit_solution/set_arm.h>
#include <moveit_solution/set_gripper.h>
#include <moveit_solution/add_collision.h>
#include <moveit_solution/remove_collision.h>
#include <moveit_solution/pick.h>

class SrvClass
{
  /* Service class which advertises a set of MoveIt services and executes their
  callbacks. Here we declare all of the functions and variables that make up the
  class. The implementation of each function is written in the .cpp file */

public:

  /* Member functions */

  // constructor
  SrvClass(ros::NodeHandle& nh);

  // service callbacks
  bool setArmCallback(moveit_solution::set_arm::Request &request,
    moveit_solution::set_arm::Response &response);
  bool setGripperCallback(moveit_solution::set_gripper::Request &request,
    moveit_solution::set_gripper::Response &response);
  bool addCollisionCallback(moveit_solution::add_collision::Request &request,
    moveit_solution::add_collision::Response &response);
  bool removeCollisionCallback(moveit_solution::remove_collision::Request &request,
    moveit_solution::remove_collision::Response &response);
  bool pickCallback(moveit_solution::pick::Request &request,
    moveit_solution::pick::Response &response);

  // MoveIt functions
  bool moveArm(geometry_msgs::Pose target_pose);
  bool moveGripper(float width);
  void addCollisionObject(std::string object_name, geometry_msgs::Point centre, 
    geometry_msgs::Vector3 dimensions, geometry_msgs::Quaternion orientation);
  void removeCollisionObject(std::string object_name);
  bool pick(geometry_msgs::Point position);
  
  /* Variables */

  // define some constants
  std::string base_frame_ = "panda_link0";
  double gripper_open_ = 80e-3;
  double gripper_closed_ = 0.0;

  ros::NodeHandle nh_;

  // servers for each of the services we will advertise
  ros::ServiceServer set_arm_srv_;
  ros::ServiceServer set_gripper_srv_;
  ros::ServiceServer add_collision_srv_;
  ros::ServiceServer remove_collision_srv_;
  ros::ServiceServer pick_srv_;

  // move groups to seperate the arm and the gripper, these are defined in urdf
  moveit::planning_interface::MoveGroupInterface arm_group_{"panda_arm"};
  moveit::planning_interface::MoveGroupInterface hand_group_{"hand"};

  // interface to interact with the moveit planning scene (eg collision objects)
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface_;

};